{"version":3,"sources":["assets/images/logo10.png","assets/components/Header.jsx","assets/components/Buttons/Button_check.jsx","assets/components/WordCard.jsx","assets/components/ArrowNext.jsx","assets/components/ArrowPrev.jsx","assets/images/error.png","assets/components/ServerError.jsx","assets/components/CardsContainer.jsx","assets/components/TableHeader.jsx","assets/components/Buttons/Button_edit.jsx","assets/components/Buttons/Button_delete.jsx","assets/components/Buttons/Button_save.jsx","assets/components/Buttons/Button_cancel.jsx","assets/components/TableRow.jsx","assets/components/Loader.jsx","assets/components/Table.jsx","assets/components/Footer.jsx","assets/images/1.png","assets/components/ErrorPage.jsx","assets/components/NewWord.jsx","App.js","assets/stores/WordsStore.js","index.js"],"names":["Header","className","to","src","logo","alt","ButtonCheck","props","console","log","buttonRef","useRef","useEffect","current","focus","tabIndex","type","onClick","ref","WordCard","useState","clicked","showTranslate","handleClick","notLearnedCard","learnedCard","english","transcription","russian","ArrowNext","disabled","ArrowPrev","classnames","ServerError","error","CardsContainer","inject","observer","wordsStore","selectedCardIndex","setselectedCardIndex","countedLearnedCard","setcountedLearnedCard","words","useCallback","serverError","length","id","TableHeader","ButtonEdit","title","ButtonDelete","ButtonSave","ButtonCancel","englishFormat","russianFormat","TableRow","editMode","setEditMode","rowData","setRowData","isRowInValid","useMemo","search","test","classNameInputEnglish","redInputTableRow","classNameInputTranscription","classNameInputRussian","handleChange","e","target","name","value","toLowerCase","onChange","word","alert","saveChanges","deleteWord","Loader","Table","isLoading","map","i","removeWord","Footer","href","fill","xmlns","viewBox","width","height","d","ErrorPage","NewWord","newData","setnewData","history","useHistory","englishInput","transcriptionInput","russianInput","errorsIntuts","setErrorsIntuts","isInputsInValid","htmlFor","addWord","push","sentWord","App","exact","path","component","WordsStore","loadWords","fetch","then","response","json","data","catch","method","body","JSON","stringify","headers","filter","el","makeObservable","this","observable","action","stores","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebc7e334.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo10.6850f908.png\";","import React from 'react';\nimport './Header.scss';\nimport logo from '../images/logo10.png';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"header_logo\">\n        <Link to=\"/languageapp\">\n          <img className=\"logo\" src={logo} alt=\"Логотип приложения\" />{' '}\n        </Link>\n        <p className=\"header_phrase\">\n          Чтобы попасть в Хогвартс - надо знать английский язык!\n        </p>\n      </div>\n      <div className=\"header_buttons\">\n        <Link to=\"/\">\n          <div className=\"header_button\">Home</div>\n        </Link>\n        <Link to=\"/game\">\n          <div className=\"header_button\">Training</div>\n        </Link>\n        <Link to=\"/new\">\n          <div className=\"header_button\">Add new word</div>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useRef, useEffect } from 'react';\nimport './Button_check.scss';\n\nconst ButtonCheck = props => {\n  console.log();\n  const buttonRef = useRef();\n  useEffect(() => buttonRef.current.focus(), []); //делаем фокус на кнопке при первой зарузке\n  return (\n    <div\n      tabIndex=\"0\" //добавлено свойство, чтобы .current.focus() срабатывал на div\n      type=\"button\"\n      className=\"buttonCheck\"\n      onClick={props.onClick}\n      ref={buttonRef}\n    >\n      Проверить\n    </div>\n  );\n};\n\nexport default ButtonCheck;\n","import React, { useState } from 'react';\nimport './WordCard.scss';\nimport ButtonCheck from './Buttons/Button_check.jsx';\n\nconst WordCard = props => {\n  const [clicked, showTranslate] = useState(false); //Состояние, которое хранит индекс выделенной карточки\n\n  const handleClick = () => {\n    showTranslate(!clicked);\n    {\n      if (!clicked) {\n        props?.learnedCard();\n      } else {\n        props?.notLearnedCard();\n      }\n    }\n  };\n\n  return (\n    <div className=\"wordCard\">\n      <div className=\"englishWord\">{props.english}</div>\n      <div className=\"englishTranscription\">{props.transcription}</div>\n      {/* <div className=\"russianWord\">{props.russian}</div> */}\n      {/* условный рендеринг: кликнули на кнопку - появился перевод */}\n      {clicked ? (\n        <div className=\"checking\">\n          <div className=\"russianWord\">{props.russian}</div>\n          <div className=\"checking_btn\" onClick={handleClick}>\n            Скрыть перевод\n          </div>\n        </div>\n      ) : (\n        <ButtonCheck onClick={handleClick} />\n      )}\n    </div>\n  );\n};\n\nexport default WordCard;\n","import React from 'react';\nimport './Arrow.scss';\n\nconst ArrowNext = props => {\n  const className = `arrow\n  ${props.disabled ? 'disabled' : ' '}\n  `;\n\n  return (\n    <div\n      className={className}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      &#8827;\n    </div>\n  );\n};\n\nexport default ArrowNext;\n","import React from 'react';\nimport classnames from 'classnames';\nimport './Arrow.scss';\n\nconst ArrowPrev = props => {\n  const className = classnames('arrow', {\n    //задаем доп класс, если появляется свойство disabled (его условия прописываем в App)\n    disabled: props.disabled,\n  });\n\n  return (\n    <div\n      className={className}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      &#8826;\n    </div>\n  );\n};\n\nexport default ArrowPrev;\n","export default __webpack_public_path__ + \"static/media/error.1b2bf6b7.png\";","import React from 'react';\nimport './ServerError.scss';\nimport error from '../images/error.png';\n\nconst ServerError = () => {\n  return (\n    <div className=\"serverError\">\n      <p className=\"serverError_text\">\n        Данные не были загружены! <br />\n        Может, у вас отсутствует подключение к интернету?\n      </p>\n      <img className=\"errorPic\" src={error} alt=\"Ошибка!\" />\n    </div>\n  );\n};\n\nexport default ServerError;\n","import React, { useState, useCallback } from 'react';\nimport './CardsContainer.scss';\nimport WordCard from './WordCard';\n// import { words } from './dataWords';//нужно, если слова приходят не с сервераа из файла\nimport ArrowNext from './ArrowNext';\nimport ArrowPrev from './ArrowPrev';\nimport ServerError from './ServerError';\nimport { observer, inject } from 'mobx-react';\n\nconst CardsContainer = inject(['wordsStore'])(\n  observer(({ wordsStore }) => {\n    const [selectedCardIndex, setselectedCardIndex] = useState(0); //для карусели карточек\n    const [countedLearnedCard, setcountedLearnedCard] = useState(0); //для подсчета выученных слов в тренировке\n\n    const words = wordsStore.words; //слова из стора\n\n    const handleClickNext = () => {\n      //вариант с конечной каруселью\n      // const newIndex = selectedCardIndex + 1;\n      // if (newIndex < words.length) {\n      //   setselectedCardIndex(newIndex);\n      // }\n\n      //вариант с бесконечной каруселью\n      setselectedCardIndex((selectedCardIndex + 1) % words.length);\n    };\n\n    const handleClickPrev = () => {\n      //вариант с конечной каруселью\n      // const newIndex = selectedCardIndex - 1;\n      // if (newIndex >= 0) {\n      //   setselectedCardIndex(newIndex);\n      // }\n\n      //вариант с бесконечной каруселью\n      setselectedCardIndex(\n        (selectedCardIndex - 1 + words.length) % words.length,\n      );\n    };\n\n    //счетчик изученных слов (заворачиваем в хук useCallback, чтобы меньше перерендеривалось, его лучше использовать где большие расчеты)\n    const learnedCard = useCallback(\n      () => setcountedLearnedCard(countedLearnedCard + 1),\n      [countedLearnedCard],\n    );\n    const notLearnedCard = useCallback(\n      () => setcountedLearnedCard(countedLearnedCard - 1),\n      [countedLearnedCard],\n    );\n\n    if (wordsStore.serverError) return <ServerError />;\n\n    return (\n      <div className=\"cardsContainer\">\n        <div className=\"cardsContainer_count\">\n          Изучено слов за тренировку: {countedLearnedCard}\n        </div>\n        <div className=\"cardsContainer_cards\">\n          <ArrowPrev\n            onClick={handleClickPrev}\n\n            // disabled={selectedCardIndex === 0}//для конечной карусели\n          />\n          <WordCard\n            key={words[selectedCardIndex]?.id}\n            english={words[selectedCardIndex]?.english}\n            transcription={words[selectedCardIndex]?.transcription}\n            russian={words[selectedCardIndex]?.russian}\n            learnedCard={learnedCard}\n            notLearnedCard={notLearnedCard}\n\n            //вот так внутри лучше не писать\n            // learnedCard={() => setcountedLearnedCard(countedLearnedCard + 1)}\n            // notLearnedCard={() => setcountedLearnedCard(countedLearnedCard - 1)}\n          />\n          <ArrowNext\n            onClick={handleClickNext}\n            // disabled={selectedCardIndex === words.length - 1}//для конечной карусели\n          />\n        </div>\n        <div className=\"cardsContainer_count\">\n          {selectedCardIndex + 1} / {words.length}\n        </div>\n      </div>\n    );\n  }),\n);\n\nexport default CardsContainer;\n","import React from 'react';\nimport './TableHeader.scss';\n\nconst TableHeader = () => {\n  return (\n    <thead className=\"table_header\">\n      <tr>\n        <th>English</th>\n        <th>Transcription</th>\n        <th>Translate</th>\n        <th className=\"table_header__actions\">Actions</th>\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHeader;\n","import React from 'react';\n\nimport './Button_actions.scss';\n\nconst ButtonEdit = props => {\n  return (\n    <div\n      className=\"buttonEdit button_actions\"\n      onClick={props.onClick}\n      title=\"редактировать\"\n    >\n      &#128396;\n    </div>\n  );\n};\n\nexport default ButtonEdit;\n","import React from 'react';\nimport './Button_actions.scss';\n\nconst ButtonDelete = props => {\n  return (\n    <div\n      className=\"buttonDelete button_actions\"\n      onClick={props.onClick}\n      title=\"удалить\"\n    >\n      &#10060;\n    </div>\n  );\n};\n\nexport default ButtonDelete;\n","import React from 'react';\nimport './Button_actions.scss';\n\nconst ButtonSave = props => {\n  const className = `buttonSave button_actions\n  ${props.disabled ? 'disabled_button' : ' '}\n  `;\n\n  return (\n    <div className={className} onClick={props.onClick} title=\"сохранить\">\n      &#9989;\n    </div>\n  );\n};\n\nexport default ButtonSave;\n","import React from 'react';\nimport './Button_actions.scss';\n\nconst ButtonCancel = props => {\n  return (\n    <div\n      className=\"buttonCancel button_actions\"\n      onClick={props.onClick}\n      title=\"отменить\"\n    >\n      &#65794;\n    </div>\n  );\n};\n\nexport default ButtonCancel;\n","import React, { useState, useMemo } from 'react';\nimport './TableRow.scss';\nimport ButtonEdit from './Buttons/Button_edit';\nimport ButtonDelete from './Buttons/Button_delete';\nimport ButtonSave from './Buttons/Button_save';\nimport ButtonCancel from './Buttons/Button_cancel';\nimport classnames from 'classnames';\n\n//условия валидации полей input\nconst englishFormat = /^[a-zA-Z-\\s]+$/; //поле english должно содержать только слова англ буквами, включая дефис (можно прописывать отдельно и заглавные и строчные)\nconst russianFormat = /^[а-яё-\\s]+$/i; //поле english должно содержать только слова русскими буквами, включая дефис (а можно использовать флаг /i)\n\nconst TableRow = props => {\n  const [editMode, setEditMode] = useState(false); // режим редактирования строчки таблицы (самого компонента TableRow) изначально не редактируема (false)\n  const [rowData, setRowData] = useState({\n    //первоначальные состояния (текст) полей input (из пропсов)\n    english: props.english,\n    transcription: props.transcription,\n    russian: props.russian,\n    id: props.id,\n  });\n\n  // валидация\n  const isRowInValid = useMemo(() => {\n    return (\n      rowData.english.search(englishFormat) === -1 ||\n      !russianFormat.test(rowData.russian) ||\n      rowData.english === '' ||\n      rowData.transcription === '' ||\n      rowData.russian === ''\n    );\n  }, [rowData.russian, rowData.english, rowData.transcription, rowData.id]);\n\n  // стили для полей input (inputTableRow и если поле пустое/есть неправильные символы - redInputTableRow)\n  const classNameInputEnglish = classnames('', {\n    redInputTableRow:\n      rowData.english === '' || !englishFormat.test(rowData.english),\n  });\n  const classNameInputTranscription = classnames('', {\n    redInputTableRow: rowData.transcription === '',\n  });\n  const classNameInputRussian = classnames('', {\n    redInputTableRow:\n      rowData.russian === '' || !russianFormat.test(rowData.russian),\n  });\n\n  const handleClick = () => setEditMode(!editMode); //по клику у строки появляется состояние редактируема\n\n  //изменение состояния полей\n  const handleChange = e => {\n    setRowData({\n      ...rowData, //копируем объект с полями rowData\n      [e.target.name]: e.target.value.toLowerCase(), //изменяем value inputов на вводимые значения в зависимости от ключа name и маленькими буквами (toLowerCase)\n    });\n  };\n\n  // функция сохранения изменений слова (НЕ РАБОТАЕТ ИЗ-ЗА СЕРВЕРА)\n  const saveChanges = word => {\n    props.saveChanges(word);\n  };\n\n  // функция удаления слова\n  const deleteWord = id => {\n    props.deleteWord(id);\n  };\n\n  //кнопка сохранить\n  const handleClickSave = () => {\n    if (!isRowInValid) {\n      saveChanges(rowData);\n      setEditMode(!editMode); //снова убирается режим редактирования\n    } else {\n      alert(\n        //срабатывает, если закоменнить в конпке // disabled={isRowInValid}\n        'Остались незаполненные поля или поля содержат недопустимые знаки!',\n      );\n    }\n  };\n\n  return (\n    <tr className=\"tableRow\">\n      <td>\n        {editMode ? (\n          <input\n            // className={classNameInputEnglish} тогда в classNameInputEnglish надо заменить ' ' на 'inputTableRow'\n            //или вариант:\n            className={`inputTableRow ${classNameInputEnglish}`}\n            value={rowData.english}\n            name=\"english\"\n            onChange={handleChange}\n          />\n        ) : (\n          rowData.english\n        )}\n      </td>\n      <td>\n        {editMode ? (\n          <input\n            className={`inputTableRow ${classNameInputTranscription}`}\n            value={rowData.transcription}\n            name=\"transcription\"\n            onChange={handleChange}\n          />\n        ) : (\n          rowData.transcription\n        )}\n      </td>\n      <td>\n        {editMode ? (\n          <input\n            className={`inputTableRow ${classNameInputRussian}`}\n            value={rowData.russian}\n            name=\"russian\"\n            onChange={handleChange}\n          />\n        ) : (\n          rowData.russian\n        )}\n      </td>\n\n      {editMode ? (\n        <td className=\"tableRow_actions\">\n          <ButtonSave\n            onClick={handleClickSave}\n            // disabled={isRowInValid} //надо закомментить это, чтобы срабатывал alert\n          />\n          <ButtonCancel onClick={handleClick} />\n        </td>\n      ) : (\n        <td className=\"tableRow_actions\">\n          <ButtonEdit onClick={handleClick} />\n          <ButtonDelete onClick={() => deleteWord(props.id)} />\n        </td>\n      )}\n    </tr>\n  );\n};\n\nexport default TableRow;\n","import React from 'react';\nimport './Loader.scss';\n\nconst Loader = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"spinners-container\">\n        <div className=\"spinner-block\">\n          <div className=\"spinner-eff spinner-eff-1\">\n            <div className=\"bar bar-top\"></div>\n            <div className=\"bar bar-right\"></div>\n            <div className=\"bar bar-bottom\"></div>\n            <div className=\"bar bar-left\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport './Table.scss';\nimport TableHeader from './TableHeader';\nimport TableRow from './TableRow';\n// import { words } from './dataWords';//нужно, если слова приходят не с сервераа из файла\nimport Loader from './Loader';\nimport ServerError from './ServerError';\nimport { observer, inject } from 'mobx-react';\n\nconst Table = inject(['wordsStore'])(\n  observer(({ wordsStore }) => {\n    if (wordsStore.serverError) return <ServerError />;\n    if (wordsStore.isLoading || !wordsStore.words.length) return <Loader />;\n\n    return (\n      <div className=\"main_table\">\n        <table className=\"table\">\n          <TableHeader />\n          <tbody>\n            {wordsStore.words?.map((word, i) => (\n              <TableRow\n                key={word.id}\n                english={word.english}\n                transcription={word.transcription}\n                russian={word.russian}\n                id={word.id}\n                deleteWord={wordsStore.removeWord}\n                saveChanges={wordsStore.saveChanges}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }),\n);\n\nexport default Table;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div className=\"foter_copyright\">&#169; 2021</div>\n      <div className=\"footer_text\">Волкова Елена</div>\n      <div className=\"footer_networks\">\n        <a href=\"https://github.com/ElenaVolkova4\">\n          <svg\n            fill=\"#eee0ee\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 30 30\"\n            width=\"30px\"\n            height=\"30px\"\n          >\n            {' '}\n            <path d=\"M15,3C8.373,3,3,8.373,3,15c0,5.623,3.872,10.328,9.092,11.63C12.036,26.468,12,26.28,12,26.047v-2.051 c-0.487,0-1.303,0-1.508,0c-0.821,0-1.551-0.353-1.905-1.009c-0.393-0.729-0.461-1.844-1.435-2.526 c-0.289-0.227-0.069-0.486,0.264-0.451c0.615,0.174,1.125,0.596,1.605,1.222c0.478,0.627,0.703,0.769,1.596,0.769 c0.433,0,1.081-0.025,1.691-0.121c0.328-0.833,0.895-1.6,1.588-1.962c-3.996-0.411-5.903-2.399-5.903-5.098 c0-1.162,0.495-2.286,1.336-3.233C9.053,10.647,8.706,8.73,9.435,8c1.798,0,2.885,1.166,3.146,1.481C13.477,9.174,14.461,9,15.495,9 c1.036,0,2.024,0.174,2.922,0.483C18.675,9.17,19.763,8,21.565,8c0.732,0.731,0.381,2.656,0.102,3.594 c0.836,0.945,1.328,2.066,1.328,3.226c0,2.697-1.904,4.684-5.894,5.097C18.199,20.49,19,22.1,19,23.313v2.734 c0,0.104-0.023,0.179-0.035,0.268C23.641,24.676,27,20.236,27,15C27,8.373,21.627,3,15,3z\" />\n          </svg>{' '}\n        </a>\n        <a href=\"https://t.me/tigra_v_kletke\">\n          <svg\n            fill=\"#eee0ee\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 50 50\"\n            width=\"30px\"\n            height=\"30px\"\n          >\n            <path d=\"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445\tc-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758\tc0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125\tc0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077\tC47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\" />\n          </svg>{' '}\n        </a>\n        <a href=\"https://www.linkedin.cn/mwlite/in/elena-volkova-a65896224\">\n          <svg\n            fill=\"#eee0ee\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 50 50\"\n            width=\"30px\"\n            height=\"30px\"\n          >\n            {' '}\n            <path d=\"M41,4H9C6.24,4,4,6.24,4,9v32c0,2.76,2.24,5,5,5h32c2.76,0,5-2.24,5-5V9C46,6.24,43.76,4,41,4z M17,20v19h-6V20H17z M11,14.47c0-1.4,1.2-2.47,3-2.47s2.93,1.07,3,2.47c0,1.4-1.12,2.53-3,2.53C12.2,17,11,15.87,11,14.47z M39,39h-6c0,0,0-9.26,0-10 c0-2-1-4-3.5-4.04h-0.08C27,24.96,26,27.02,26,29c0,0.91,0,10,0,10h-6V20h6v2.56c0,0,1.93-2.56,5.81-2.56 c3.97,0,7.19,2.73,7.19,8.26V39z\" />\n          </svg>{' '}\n        </a>\n        <a href=\"https://www.instagram.com/tigra_v_kletke/?hl=ru\">\n          {' '}\n          <svg\n            fill=\"#eee0ee\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 30 30\"\n            width=\"30px\"\n            height=\"30px\"\n          >\n            {' '}\n            <path d=\"M 9.9980469 3 C 6.1390469 3 3 6.1419531 3 10.001953 L 3 20.001953 C 3 23.860953 6.1419531 27 10.001953 27 L 20.001953 27 C 23.860953 27 27 23.858047 27 19.998047 L 27 9.9980469 C 27 6.1390469 23.858047 3 19.998047 3 L 9.9980469 3 z M 22 7 C 22.552 7 23 7.448 23 8 C 23 8.552 22.552 9 22 9 C 21.448 9 21 8.552 21 8 C 21 7.448 21.448 7 22 7 z M 15 9 C 18.309 9 21 11.691 21 15 C 21 18.309 18.309 21 15 21 C 11.691 21 9 18.309 9 15 C 9 11.691 11.691 9 15 9 z M 15 11 A 4 4 0 0 0 11 15 A 4 4 0 0 0 15 19 A 4 4 0 0 0 19 15 A 4 4 0 0 0 15 11 z\" />\n          </svg>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/1.91b91e0a.png\";","import React from 'react';\nimport './ErrorPage.scss';\nimport error from '../images/1.png';\nimport { Link } from 'react-router-dom';\n\nconst ErrorPage = () => {\n  return (\n    <div className=\"errorPage\">\n      <p className=\"errorPage_text\">Такого пути в Хогвартс не существует!</p>\n      <Link to=\"/\">\n        {' '}\n        <img className=\"errorPic\" src={error} alt=\"Ошибка!\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { useState, useMemo } from 'react';\nimport './NewWord.scss';\nimport classnames from 'classnames';\nimport { useHistory } from 'react-router-dom';\nimport ServerError from './ServerError';\nimport { observer, inject } from 'mobx-react';\n\n//условия валидации полей input\nconst englishFormat = /^[a-zA-Z-\\s]+$/; //поле english должно содержать только слова англ буквами, включая дефис (можно прописывать отдельно и заглавные и строчные)\nconst russianFormat = /^[а-яё-\\s]+$/i; //поле english должно содержать только слова русскими буквами, включая дефис (а можно использовать флаг /i)\n\nconst NewWord = inject(['wordsStore'])(\n  observer(({ wordsStore }) => {\n    //первоначальное состояние полей input\n    const [newData, setnewData] = useState({\n      english: '',\n      transcription: '',\n      russian: '',\n    });\n\n    const history = useHistory(); // для возвращения пользователя к таблице после добавления слова\n\n    //валидация\n    //первоначальное состояние инпутов, когда нет ошибок (для валидации в handleChange)\n    const [errorsIntuts, setErrorsIntuts] = useState({\n      englishInput: false,\n      transcriptionInput: false,\n      russianInput: false,\n    });\n\n    const isInputsInValid = useMemo(() => {\n      return (\n        newData.english.search(englishFormat) === -1 ||\n        russianFormat.test(newData.russian) !== true ||\n        newData.english === '' ||\n        newData.transcription === '' ||\n        newData.russian === ''\n      );\n    }, [newData.russian, newData.english, newData.transcription, newData.id]);\n\n    // стили для полей input (inputTableRow и если поле пустое/есть неправильные символы - redInputTableRow)\n    const classNameInputEnglish = classnames('', {\n      redInputTableRow: errorsIntuts.english, //=true\n      // или так\n      // newData.english === '' || englishFormat.test(newData.english) !== true,\n    });\n    const classNameInputTranscription = classnames('', {\n      redInputTableRow: errorsIntuts.transcription, //=true\n      // или так\n      // newData.transcription === '',\n    });\n    const classNameInputRussian = classnames('', {\n      redInputTableRow: errorsIntuts.russian, //=true\n      // или так\n      // newData.russian === '' || russianFormat.test(newData.russian) !== true,\n    });\n\n    //ф-ция, чтобы можно было заносить в input текст\n    const handleChange = e => {\n      setnewData({\n        ...newData, //копируем объект с полями newData\n        [e.target.name]: e.target.value.toLowerCase(), //изменяем value inputов на вводимые значения в зависимости от ключа name и маленькими буквами (toLowerCase)\n      });\n      //валидация, срабатывающая при первом вводе в поле (поэтому она в handleChange и специально создался стейт [errorsIntuts, setErrorsIntuts]\n      if (e.target.name === 'english') {\n        setErrorsIntuts({\n          ...errorsIntuts,\n          english:\n            e.target.value === '' || !englishFormat.test(e.target.value)\n              ? true\n              : false,\n        });\n      }\n      if (e.target.name === 'transcription') {\n        setErrorsIntuts({\n          ...errorsIntuts,\n          transcription: e.target.value === '' ? true : false,\n        });\n      }\n      if (e.target.name === 'russian') {\n        setErrorsIntuts({\n          ...errorsIntuts,\n          russian:\n            e.target.value === '' || !russianFormat.test(e.target.value)\n              ? true\n              : false,\n        });\n      }\n    };\n\n    //метод отправления нового слова на сервер\n    const sentWord = newData => {\n      wordsStore.addWord(newData);\n      history.push('/'); //после добавления слова возвращает пользователя к таблице\n    };\n\n    if (wordsStore.serverError) return <ServerError />;\n\n    return (\n      <div className=\"newWord\">\n        <h4 className=\"newWord-title\">Add new word</h4>\n        <label htmlFor=\"english\">english:</label>{' '}\n        <input\n          className={`inputTableRow ${classNameInputEnglish}`}\n          value={newData.english}\n          name=\"english\"\n          onChange={handleChange}\n        />\n        <label htmlFor=\"transcription\">transcription:</label>{' '}\n        <input\n          className={`inputTableRow ${classNameInputTranscription}`}\n          value={newData.transcription}\n          name=\"transcription\"\n          onChange={handleChange}\n        />\n        <label htmlFor=\"russian\">russian:</label>{' '}\n        <input\n          className={`inputTableRow ${classNameInputRussian}`}\n          value={newData.russian}\n          name=\"russian\"\n          onChange={handleChange}\n        />\n        <button\n          className=\"buttonCheck\"\n          onClick={() => sentWord(newData)}\n          disabled={isInputsInValid}\n        >\n          Сохранить\n        </button>\n      </div>\n    );\n  }),\n);\n\nexport default NewWord;\n","import React from 'react';\nimport './App.scss';\nimport Header from './assets/components/Header.jsx';\nimport WordCard from './assets/components/WordCard.jsx';\nimport { words } from './assets/components/dataWords.js';\nimport CardsContainer from './assets/components/CardsContainer.jsx';\nimport Table from './assets/components/Table.jsx';\nimport Footer from './assets/components/Footer.jsx';\nimport ErrorPage from './assets/components/ErrorPage.jsx';\nimport NewWord from './assets/components/NewWord.jsx';\nimport { Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"main\">\n        <Switch>\n          <Route exact path=\"/languageapp\" component={Table}></Route>\n          <Route exact path=\"/game\" component={CardsContainer}></Route>\n          <Route exact path=\"/new\" component={NewWord}></Route>\n          {/* страница ошибки - без path */}\n          <Route component={ErrorPage}></Route>\n\n          {/* вывод всех карточек\n          {words.map((word, i) => (\n            <WordCard\n              key={word.id}\n              english={word.english}\n              transcription={word.transcription}\n          russian={word.russian}\n            />\n          ))} */}\n\n          {/* по одной карточке */}\n          {/* <WordCard\n            key={words[0].id}\n            english={words[0].english}\n            transcription={words[0].transcription}\n            russian={words[0].russian}\n          />\n          <WordCard\n            key={words[1].id}\n            english={words[1].english}\n            transcription={words[1].transcription}\n            russian={words[1].russian}\n          /> */}\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n};\nexport default App;\n","import { makeObservable, makeAutoObservable, action, observable } from 'mobx';\n\nclass WordsStore {\n  words = [];\n  isLoading = false;\n  serverError = false;\n\n  constructor() {\n    makeObservable(this, {\n      words: observable,\n      isLoading: observable,\n      serverError: observable,\n      loadWords: action,\n      addWord: action,\n      removeWord: action,\n      saveChanges: action,\n    });\n    this.loadWords();\n  }\n  // или так\n  // constructor() {\n  //   makeAutoObservable(this);\n  // }\n\n  // или так\n  // decorate(WordsStore, {\n  //   words: observable,\n  //   addWord: action,\n  //   removeWord: action,\n  // });\n\n  loadWords = () => {\n    this.isLoading = true;\n    this.serverError = false;\n    fetch('/api/words')\n      .then(response => response.json())\n      .then(data => {\n        this.words = data;\n        this.isLoading = false;\n      })\n      .catch(error => {\n        console.log(error);\n        this.isLoading = false;\n        this.serverError = true;\n      });\n  };\n\n  addWord = word => {\n    this.serverError = false;\n    fetch('/api/words/add', {\n      method: 'POST', //по умолчанию используется GET, поэтому POST надо конкретно прописать\n      body: JSON.stringify(word),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8', //отправляем в формате JSON\n      },\n    })\n      .then(response => response.json())\n      .then(word => {\n        this.words.push(word);\n      })\n      .catch(error => {\n        console.log(error);\n        this.serverError = true;\n      });\n  };\n\n  removeWord = id => {\n    this.serverError = false;\n    fetch(`/api/words/${id}/delete`, {\n      method: 'POST', //по умолчанию используется GET, поэтому POST надо конкретно прописать\n      body: JSON.stringify(this.words),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8', //отправляем в формате JSON\n      },\n    })\n      .then(response => response.json())\n      .then(word => {\n        this.words = this.words.filter(el => el.id !== id);\n      })\n      .catch(error => {\n        console.log(error);\n        this.serverError = true;\n      });\n  };\n\n  saveChanges = id => {\n    fetch(`/api/words/${id}/update`, {\n      method: 'POST', //по умолчанию используется GET, поэтому POST надо конкретно прописать\n      body: JSON.stringify(this.words),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8', //отправляем в формате JSON\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.words = data;\n      })\n      .catch(error => {\n        console.log(error);\n        this.serverError = true;\n      });\n  };\n}\nexport default WordsStore;\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport WordsStore from './assets/stores/WordsStore';\n\nconst stores = {\n  wordsStore: new WordsStore(),\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider {...stores}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}